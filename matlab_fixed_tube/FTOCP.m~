function [ uMPC, xPred, uPred ] = FTOCP( x0, Alin, Blin, X, U, N, Q, R, Qf, x_goal, X_constrTightening, U_constrTightening, error_max )

% define variable
n = size(Alin, 2);
d = size(Blin, 2);
x = sdpvar(n, N+1);
u = sdpvar(d, N);

X = X - X_constrTightening;
U = U - U_constrTightening;

Fx = X.A; bx = X.b;
Fu = U.A; bu = U.b;

% constraints 
Mat = diag(1./(error_max));

constraints = [ (x(:,1) - x0)'*Mat*(x(:,1) - x0)<= 0]; % Constraint initial state into error set
%constraints = [ X_constrTightening.A*(x(:,1) - x0) <= X_constrTightening.b]; %Polytopic approximation

for i = 1:N
    constraints = [constraints;
                   x(:,i + 1) == Alin*x(:,i) + Blin*u(:,i);
                   Fx*x(:,i) <= bx;
                   Fu*u(:,i) <= bu;];
end

% cost 
cost = 1000*(x(:,1) - x0)'*eye(n)*(x(:,1) - x0);
for i = 1:N
    cost = cost + (x(:,i)-x_goal)'*Q*(x(:,i)-x_goal) + u(:,i)'*R*u(:,i);
end
cost = cost + (x(:,N+1)-x_goal)'*Qf*(x(:,N+1)-x_goal);

% solve QP        
ops = sdpsettings('verbose',1,'solver','gurobi');
solution = solvesdp(constraints,cost,ops);

if solution.problem ~= 0
    errorNotFeasible = 1
    xPred = zeros(n,N+1);
    uPred = zeros(d, N);
    uMPC = 0;
else
    xPred = double(x);
    uPred = double(u);
    uMPC = double(u(:,1));
end
end

